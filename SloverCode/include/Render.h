#ifndef RENDER_H
#define RENDER_H

#include "ngl/ShaderManager.h"
#include "ngl/TransformStack.h"
#include "ngl/Camera.h"
#include "SPHSolver.h"
#include "EnvironmentAndRigidBody.h"
#include <iostream>

/// @file Render.h
/// @brief manages visulisation of simulation data generated by the sphSolver
/// @author Shalin K Banjara
/// @version 1.0
/// @date 23.10.11
/// Revision History :
/// Initial Version 23.10.11
/// @class Render
/// @brief manages visulisation of simulation data generated by the sphSolver

class Render
{
public:

    /// @brief ctor
    Render();

    /// @brief initialises the shaders and member variables of the class required to view the simulation data
    /// @param[in] _environment pointer to EnvironmentAndRigidBody Class
    void initialiseRender(EnvironmentAndRigidBody* _environment);

    /// @brief draws the simulation data on the OpenGL Window
    /// @param[in] _environment pointer to EnvironmentAndRigidBody Class
    /// @param[in] _solver pointer to SPHSolver Class
    /// @param[in] _transformStack transformation stack
    /// @param[in] _cam pointer to ngl/Camera Class
    void draw(EnvironmentAndRigidBody* _environment, SPHSolver* _solver,ngl::TransformStack _transformStack, ngl::Camera* _cam);

    /// @brief updates the projection matrix for the shaders when the glWindow is resized
    /// @param[in] _cam pointer to ngl/Camera Class
    void updateProjection(ngl::Camera* _cam);

private:
    /// @brief pointer to ngl/BBox Class
    ngl::BBox *m_bbox;
};

#endif // RENDER_H
